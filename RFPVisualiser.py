from graphics import *
from operator import itemgetter
from random import randint
import ast

AXIS_X = 1000
AXIS_Y = 700
SCALE = 20

def parse(program, question):
    arr_tuples = []
    with open(program) as f:
        line = f.readline()

        for i, line in enumerate(f):
            if i == question - 2:
                beg = line.split("#")[0]
                problem_num = beg.split(":")[0]
                room = ast.literal_eval("[{}]".format(beg.split(":")[1]))
                all_shapes = line.split("#")[1].split(";")

                print("Problem", problem_num)
                print("Room vertices", room)

                # furniture shapes stored as a list of a list of tuples
                # meaning each furniture is a list of tuples, so the whole list of furniture
                # is a list of list of tuples
                for i in range(0, len(all_shapes)):
                    shape = all_shapes[i].split(":")
                    cost = shape[0].split()[0] # think about how cost will be stored in the list
                    vertices = shape[1]
                    vertices_tuple = ast.literal_eval("[{}]".format(vertices))
                    arr_tuples += [vertices_tuple]
                    # store the cost and area in the last tuple
                    arr_tuples[i].append((ast.literal_eval(cost), find_area(vertices_tuple)))
                    #print(i, "Cost is", cost, "for this shape", vertices)

# sorting furniture list based on max area
    arr_tuples = sorted(arr_tuples, key=lambda x: x[-1][1], reverse=True)
    return room, arr_tuples

def find_area(vertices):
    area = 0.0
    for i in range(len(vertices)):
        if (i + 1 < len(vertices)):
            # all values casted to float
            area += ((float)(vertices[i][0])*(float)(vertices[i+1][1])) - ((float)(vertices[i][1])*(float)(vertices[i+1][0]))
    area += ((float)(vertices[-1][0])*(float)(vertices[0][1])) - ((float)(vertices[-1][0])*(float)(vertices[0][1]))
    area = area / 2
    return area


def main(room, furniture):
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Display Furniture
    for index, furniture in enumerate(furniture):
        furniturePoints = []

        largestx = max(furniture, key=itemgetter(1))[0]
        largesty = max(furniture, key=itemgetter(1))[1]

        posx = randint(1, round(AXIS_X))
        posy = randint(1, round(AXIS_Y))

        for coord in furniture[:-1]:
            furniturePoints.append(Point((coord[0] - largestx) * SCALE + posx, (coord[1] - largesty) * SCALE + posy))

        weight = round(furniture[-1][1])

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255, 20, 100))
        display.draw(win)

    # Display Room
    largestx = max(room, key=itemgetter(1))[0]
    largesty = max(room, key=itemgetter(1))[1]

    roomPoints = []

    for coord in room:
        roomPoints.append(Point(((coord[0] - largestx/2) * SCALE) + AXIS_X/2, ((coord[1] - largesty/2) * SCALE) + AXIS_Y/2))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(0, 134, 244))
    display.draw(win)

    win.getMouse()
    win.close()


def onTop(room, furniture):
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Room
    roomPoints = []

    for coord in room:
        roomPoints.append(Point(coord[0] * SCALE + 100, coord[1] * SCALE + 100))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(66, 134, 244))
    display.draw(win)

    # Furniture
    for index, furniture in enumerate(furniture):
        furniturePoints = []

        for coord in furniture[:-1]:
            furniturePoints.append(Point(coord[0] * SCALE + 100, coord[1] * SCALE + 100))

        weight = round(furniture[-1][1]*3)

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255, 20, 100))
        display.draw(win)

    win.getMouse()
    win.close()

q5sol = [[(0.658184340470968, 1.4279926631552122), (-0.10927736506497493, 1.0229952226467633), (0.29572007544347445, 0.2555335171108204), (1.0631817809794164, 0.6605309576192693), (0.658184340470968, 1.4279926631552122)], [(0.21022554714773461, 1.3011041369641263), (-0.0503968588236921, 1.6479918141397474), (-0.39728453599931335, 1.3873694081683206), (-0.13666213002788663, 1.0404817309926995), (0.21022554714773461, 1.3011041369641263)]]


q3sol = [[(0.0, 0.0), (5.0, 0.0), (6.0, 4.0), (-2.0, 4.0), (0.0, 0.0)]]

q12sol = [[(-0.7022049007702985, 1.7332691948725603), (0.2191992736298054, 1.344663549779668), (0.6078049187226974, 2.2660677241797726), (-0.3135992556774066, 2.6546733692726643)], [(-0.01779577250209663, 3.233830459928292), (0.45194139212631923, 2.351024141324457), (1.3347477107301549, 2.8207613059528724), (0.8650105461017387, 3.703567624556708)], [(-0.3409175439648696, 1.2807781717197142), (-0.8905842417292096, 1.7451617505072536), (-1.354967820516749, 1.1954950527429138), (-0.8053011227524092, 0.7311114739553742)]]


q13sol = [[(4.37955986726222, 8.023159365777781), (6.371034049206023, 7.135218921084113), (7.25897449389969, 9.126693103027918), (5.267500311955886, 10.014633547721585)], [(9.874475327065886, 13.597852124904861), (7.757161360249988, 14.118802426371186), (7.236211058783662, 12.00148845955529), (9.353525025599561, 11.480538158088963)], [(9.284582342615872, 16.28657062898862), (10.267539349598815, 14.340239934298054), (12.213870044289381, 15.323196941280996), (11.230913037306438, 17.269527635971563)], [(5.085884398751204, 11.264715292093737), (7.678121823432698, 9.754647368429158), (8.181477797987558, 10.618726509989655), (5.589240373306063, 12.128794433654235)], [(4.523717236075501, 10.794512901329522), (3.1111669085542895, 8.14787322577493), (3.9933801337391532, 7.677023116601193), (5.405930461260365, 10.323662792155785)], [(8.191874176149794, 14.841390847136134), (8.898772804053257, 14.858546891791017), (9.984854812890777, 13.823933016918145), (10.00201085754566, 13.117034389014682), (10.69175344079424, 13.841089061573028), (8.881616759398375, 15.565445519694482)], [(1.1132819056741072, 6.778179379291613), (1.7452574027119074, 6.0031910108990125), (2.5202457711045083, 6.6351665079368125), (1.8882702740667077, 7.410154876329414)], [(2.9665360213208314, 1.6388805291814093), (1.9691413794094224, 1.5667422710487644), (2.0412796375420674, 0.5693476291373551), (3.0386742794534767, 0.6414858872700002)], [(1.814199008208306, 4.336040500798683), (1.9681249129607477, 3.347958107550963), (2.956207306208468, 3.5018840123034045), (2.802281401456026, 4.489966405551125)], [(6.046215182591479, 11.91875584943144), (7.023387407224393, 11.706307165260505), (7.235836091395328, 12.68347938989342), (6.258663866762413, 12.895928074064354)], [(1.493639780039826, 0.14521521048558939), (0.6865660215329149, -0.44523542109128356), (1.277016653109787, -1.2523091795981944), (2.084090411616699, -0.6618585480213215)], [(9.223278342351268, 11.239625878275397), (8.34356729844307, 11.715134531431099), (7.868058645287369, 10.8354234875229), (8.747769689195566, 10.3599148343672)], [(4.773313105565357, 0.2669859588522492), (3.7733141470551654, 0.2684292116129613), (3.771870894294453, -0.7315697468972308), (4.771869852804645, -0.7330129996579429)], [(2.364766091723367, 9.476326022630515), (1.6614964418318925, 10.18724922491155), (0.9505732395508564, 9.483979575020076), (1.6538428894423312, 8.77305637273904)]]
q20sol = [[(10.834367571535994, 152.73451963493534), (12.589601581336407, 137.08262985859076), (28.241491357680985, 138.83786386839117), (26.486257347880574, 154.48975364473577)], [(0.04567531182884055, 64.35646073368028), (-9.393987903246641, 51.74871476598444), (3.213758064449219, 42.309051550908954), (12.653421279524684, 54.916797518604795)], [(12.170688618479613, 132.5545176156625), (4.9416901776006625, 119.4113984447134), (18.08480934854978, 112.18240000383445), (25.31380778942871, 125.32551917478354)], [(14.921370853870533, 76.13297389020086), (14.77181781764366, 91.13222833465093), (-0.22743662680641563, 90.98267529842406), (-0.07788359057954253, 75.98342085397398)], [(7.170132218787435, 110.47945837412405), (3.429141585264758, 95.95344759759303), (17.95515236179579, 92.21245696407034), (21.696142995318464, 106.73846774060138)], [(14.281760053156301, 172.53613368103373), (13.170335853568176, 157.57736580902736), (28.12910372557454, 156.46594160943923), (29.240527925162667, 171.4247094814456)], [(14.466089906110907, 63.73954949086384), (13.87086914572817, 75.72477841009643), (1.8856402264955712, 75.12955764971369), (2.4808609868783087, 63.1443287304811)], [(8.982763574450738, 41.46469954650438), (26.623142599675376, 45.04478723347724), (25.429780037351087, 50.92491357521878), (7.7894010121264525, 47.34482588824592)], [(10.015060532787077, 133.34106398266218), (21.292103684878562, 129.23883315713974), (22.65951396005271, 132.99784754117024), (11.382470807961221, 137.10007836669268)], [(3.8092057189838346, 111.23222901888806), (9.688115893932762, 110.03288955281435), (10.887455360006467, 115.91179972776328), (5.008545185057541, 117.11113919383699)], [(1.9908337105506935, 71.37998448249913), (-3.9167354780436803, 72.42909185639868), (-4.965842851943234, 66.5215226678043), (0.9417263366511393, 65.47241529390475)], [(8.871557540272468, 63.41301811074243), (8.436028661798307, 58.43202276884388), (13.417024003696856, 57.99649389036972), (13.852552882171016, 62.97748923226827)], [(2.826172909603797, 95.35382535458064), (6.116647863937815, 106.89387624592858), (4.193306048713157, 107.44228873831759), (0.9028310943791391, 95.90223784696964)], [(10.814150256258797, 111.02442958660816), (14.359235510697175, 109.17176379409091), (16.211901303214425, 112.7168490485293), (12.666816048776045, 114.56951484104654)], [(10.457245000747632, 51.042155840261145), (13.771178612773074, 48.80210137326977), (16.011233079764448, 52.11603498529522), (12.697299467739002, 54.35608945228659)], [(1.3724892459739975, 91.06360855810037), (5.372483815817214, 91.07019955383556), (5.365892820082026, 95.07019412367877), (1.3658982502388095, 95.06360312794358)], [(14.99123534992447, 88.32361769979337), (18.945723378355236, 87.72193303736815), (19.54740804078046, 91.67642106579892), (15.592920012349696, 92.27810572822413)], [(8.199324312787546, 133.6976840243466), (6.50750804086424, 130.35100541682309), (9.85418664838775, 128.65918914489976), (11.546002920311059, 132.00586775242328)]]
q23sol = [[(-57.70869777282759, 101.0972443748692), (-25.761614848720757, 73.83217711582432), (-21.217436972213278, 79.1566909365088), (-53.16451989632011, 106.42175819555368)], [(-108.60896987800923, 168.58331743484993), (-97.88589563493895, 183.0406919813436), (-105.11458290818578, 188.40222910287872), (-115.83765715125607, 173.94485455638508)], [(-83.74344046070689, 140.8138782640782), (-78.67412293484222, 158.0853003196578), (-87.30983396263201, 160.61995908259013), (-92.37915148849669, 143.34853702701054)], [(-91.27179716782454, 154.47758216891822), (-92.28796737386102, 166.68536239762335), (-104.49574760256614, 165.6691921915869), (-103.47957739652968, 153.46141196288175)], [(-21.115156540188984, 54.56066340946515), (-9.55876899797165, 50.49711730118927), (-5.495222889695775, 62.05350484340661), (-17.05161043191311, 66.11705095168249)], [(-0.517661177777089, 29.166254503944145), (11.718584361150036, 29.746595016993158), (11.138243848101025, 41.98284055592028), (-1.0980016908261012, 41.40250004287127)], [(-70.69552589516931, 143.9108846455476), (-81.55287710482024, 138.23810536989345), (-75.88009782916608, 127.3807541602425), (-65.02274661951515, 133.05353343589667)], [(-65.90776163789123, 126.72338605449885), (-66.41363528430118, 114.48383574193149), (-54.17408497173381, 113.97796209552152), (-53.66821132532386, 126.2175124080889)], [(-23.276416327759378, 75.71533801845378), (-28.879760216963163, 68.67243114278641), (-21.836853341295786, 63.06908725358263), (-16.233509452092015, 70.11199412925)], [(-43.832550483764464, 115.02483708820203), (-51.38023360617816, 110.12254379999176), (-46.477940317967885, 102.57486067757807), (-38.93025719555419, 107.47715396578835)], [(-62.818220057640595, 113.93961227071914), (-67.67139875614318, 106.36025500770529), (-60.09204149312934, 101.5070763092027), (-55.23886279462675, 109.08643357221655)], [(-2.8840075814020842, 43.67644924248211), (-10.751481343382007, 48.04713072304752), (-15.122162823947422, 40.1796569610676), (-7.2546890619675, 35.808975480502184)], [(-4.121510887777694, 57.99789890822073), (-6.559077184068732, 49.334281271737346), (2.104540452414656, 46.89671497544631), (4.542106748705693, 55.560332611929695)], [(-1.5465102554017043, 24.33193225999757), (3.2849161657883275, 16.738690611226808), (10.878157814559085, 21.57011703241684), (6.046731393369054, 29.163358681187603)]]


room, furniture = parse("input.txt", 20)

#main(room, furniture)
onTop(room, q20sol)

