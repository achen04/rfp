from graphics import *
from operator import itemgetter
from random import randint
import ast

AXIS_X = 1000
AXIS_Y = 700
SCALE = 80

def parse(program, question):
    arr_tuples = []
    with open(program) as f:
        line = f.readline()

        for i, line in enumerate(f):
            if i == question - 2:
                beg = line.split("#")[0]
                problem_num = beg.split(":")[0]
                room = ast.literal_eval("[{}]".format(beg.split(":")[1]))
                all_shapes = line.split("#")[1].split(";")

                print("Problem", problem_num)
                print("Room vertices", room)

                # furniture shapes stored as a list of a list of tuples
                # meaning each furniture is a list of tuples, so the whole list of furniture
                # is a list of list of tuples
                for i in range(0, len(all_shapes)):
                    shape = all_shapes[i].split(":")
                    cost = shape[0].split()[0] # think about how cost will be stored in the list
                    vertices = shape[1]
                    vertices_tuple = ast.literal_eval("[{}]".format(vertices))
                    arr_tuples += [vertices_tuple]
                    # store the cost and area in the last tuple
                    arr_tuples[i].append((ast.literal_eval(cost), find_area(vertices_tuple)))
                    #print(i, "Cost is", cost, "for this shape", vertices)

# sorting furniture list based on max area
    arr_tuples = sorted(arr_tuples, key=lambda x: x[-1][1], reverse=True)
    return room, arr_tuples

def find_area(vertices):
    area = 0.0
    for i in range(len(vertices)):
        if (i + 1 < len(vertices)):
            # all values casted to float
            area += ((float)(vertices[i][0])*(float)(vertices[i+1][1])) - ((float)(vertices[i][1])*(float)(vertices[i+1][0]))
    area += ((float)(vertices[-1][0])*(float)(vertices[0][1])) - ((float)(vertices[-1][0])*(float)(vertices[0][1]))
    area = area / 2
    return area


def main(room, furniture):
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Display Furniture
    for index, furniture in enumerate(furniture):
        furniturePoints = []

        largestx = max(furniture, key=itemgetter(1))[0]
        largesty = max(furniture, key=itemgetter(1))[1]

        posx = randint(1, round(AXIS_X))
        posy = randint(1, round(AXIS_Y))

        for coord in furniture[:-1]:
            furniturePoints.append(Point((coord[0] - largestx) * SCALE + posx, (coord[1] - largesty) * SCALE + posy))

        weight = round(furniture[-1][1])

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255, 20, 100))
        display.draw(win)

    # Display Room
    largestx = max(room, key=itemgetter(1))[0]
    largesty = max(room, key=itemgetter(1))[1]

    roomPoints = []

    for coord in room:
        roomPoints.append(Point(((coord[0] - largestx/2) * SCALE) + AXIS_X/2, ((coord[1] - largesty/2) * SCALE) + AXIS_Y/2))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(0, 134, 244))
    display.draw(win)

    win.getMouse()
    win.close()


def onTop(room, furniture):
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Room
    roomPoints = []

    for coord in room:
        roomPoints.append(Point(coord[0] * SCALE + 400, coord[1] * SCALE + 400))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(66, 134, 244))
    display.draw(win)

    # Furniture
    for index, furniture in enumerate(furniture):
        furniturePoints = []

        for coord in furniture[:-1]:
            furniturePoints.append(Point(coord[0] * SCALE + 400, coord[1] * SCALE + 400))

        weight = round(furniture[-1][1]*3)

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255, 20, 100))
        display.draw(win)

    win.getMouse()
    win.close()

q5sol =   [[(-0.11723706775372117, 1.4410829368722111), (-0.539388979928364, 0.6829218990116351), (0.21877205793221222, 0.2607699868369925), (0.6409239701068543, 1.0189310246975678)], [(0.5627600653505467, 1.0954042404281337), (0.8023665865496077, 1.4571276348464612), (0.4406431921312801, 1.6967341560455225), (0.20103667093221883, 1.335010761627195)]]



q3sol = [[(0.0, 0.0), (5.0, 0.0), (6.0, 4.0), (-2.0, 4.0), (0.0, 0.0)]]

q12sol = [[(-0.7022049007702985, 1.7332691948725603), (0.2191992736298054, 1.344663549779668), (0.6078049187226974, 2.2660677241797726), (-0.3135992556774066, 2.6546733692726643)], [(-0.01779577250209663, 3.233830459928292), (0.45194139212631923, 2.351024141324457), (1.3347477107301549, 2.8207613059528724), (0.8650105461017387, 3.703567624556708)], [(-0.3409175439648696, 1.2807781717197142), (-0.8905842417292096, 1.7451617505072536), (-1.354967820516749, 1.1954950527429138), (-0.8053011227524092, 0.7311114739553742)]]


q13sol = [[(4.37955986726222, 8.023159365777781), (6.371034049206023, 7.135218921084113), (7.25897449389969, 9.126693103027918), (5.267500311955886, 10.014633547721585)], [(9.874475327065886, 13.597852124904861), (7.757161360249988, 14.118802426371186), (7.236211058783662, 12.00148845955529), (9.353525025599561, 11.480538158088963)], [(9.284582342615872, 16.28657062898862), (10.267539349598815, 14.340239934298054), (12.213870044289381, 15.323196941280996), (11.230913037306438, 17.269527635971563)], [(5.085884398751204, 11.264715292093737), (7.678121823432698, 9.754647368429158), (8.181477797987558, 10.618726509989655), (5.589240373306063, 12.128794433654235)], [(4.523717236075501, 10.794512901329522), (3.1111669085542895, 8.14787322577493), (3.9933801337391532, 7.677023116601193), (5.405930461260365, 10.323662792155785)], [(8.191874176149794, 14.841390847136134), (8.898772804053257, 14.858546891791017), (9.984854812890777, 13.823933016918145), (10.00201085754566, 13.117034389014682), (10.69175344079424, 13.841089061573028), (8.881616759398375, 15.565445519694482)], [(1.1132819056741072, 6.778179379291613), (1.7452574027119074, 6.0031910108990125), (2.5202457711045083, 6.6351665079368125), (1.8882702740667077, 7.410154876329414)], [(2.9665360213208314, 1.6388805291814093), (1.9691413794094224, 1.5667422710487644), (2.0412796375420674, 0.5693476291373551), (3.0386742794534767, 0.6414858872700002)], [(1.814199008208306, 4.336040500798683), (1.9681249129607477, 3.347958107550963), (2.956207306208468, 3.5018840123034045), (2.802281401456026, 4.489966405551125)], [(6.046215182591479, 11.91875584943144), (7.023387407224393, 11.706307165260505), (7.235836091395328, 12.68347938989342), (6.258663866762413, 12.895928074064354)], [(1.493639780039826, 0.14521521048558939), (0.6865660215329149, -0.44523542109128356), (1.277016653109787, -1.2523091795981944), (2.084090411616699, -0.6618585480213215)], [(9.223278342351268, 11.239625878275397), (8.34356729844307, 11.715134531431099), (7.868058645287369, 10.8354234875229), (8.747769689195566, 10.3599148343672)], [(4.773313105565357, 0.2669859588522492), (3.7733141470551654, 0.2684292116129613), (3.771870894294453, -0.7315697468972308), (4.771869852804645, -0.7330129996579429)], [(2.364766091723367, 9.476326022630515), (1.6614964418318925, 10.18724922491155), (0.9505732395508564, 9.483979575020076), (1.6538428894423312, 8.77305637273904)]]

q8sol = [[(-0.2088407462284767, -0.8543484709162543), (-0.3331816294163805, -0.9492752143581067), (-0.23825488597452826, -1.0736160975460105), (-0.11391400278662434, -0.9786893541041582)], [(-0.4258824076778389, -1.6371895275884791), (-0.18356078752999894, -1.8350965760193492), (0.0143462609008711, -1.5927749558715094), (-0.22797535924696866, -1.3948679074406392)], [(-0.1572819307738017, -0.5708417955376048), (-0.20397054632991896, -0.2614760886676515), (-0.5133362531998723, -0.3081647042237687), (-0.46664763764375505, -0.6175304110937221)], [(-0.5419373774406666, -1.2578932509496612), (-0.821778185126425, -1.3978078311887314), (-0.6818636048873543, -1.6776486388744898), (-0.40202279720159617, -1.5377340586354193)], [(-0.25328427104454665, -1.1400600514030843), (-0.4079022504230203, -1.1162898535633285), (-0.43167244826277584, -1.270907832941802), (-0.2770544688843024, -1.294678030781558)], [(-0.4368654692165683, -1.090313722841061), (-0.5917623991284107, -1.0684348984597325), (-0.6136412235097393, -1.2233318283715748), (-0.4587442935978969, -1.2452106527529034)], [(-0.49388380300356105, -0.5772329016281622), (-0.7949097873236501, -0.49196670566625555), (-0.8801759832855569, -0.7929926899863446), (-0.5791499989654677, -0.8782588859482514)], [(-0.14440643274574744, -0.16173614045378693), (-0.14885324836695218, -0.005364890912017861), (-0.30522449790872125, -0.00981170653322258), (-0.3007776822875165, -0.16618295607499167)], [(-0.36189281268698226, -0.7735384845763478), (-0.5166525984536663, -0.7507097622758492), (-0.5394813207541648, -0.9054695480425332), (-0.38472153498748085, -0.9282982703430318)], [(-0.04019676162434094, -0.49089436416738236), (0.21842779500687454, -0.3148253262390741), (0.04235875707856629, -0.056200769607858636), (-0.21626579955264918, -0.23226980753616694)], [(-0.03226178428820714, -1.2883872530050282), (-0.15399691123244907, -1.1901411298230293), (-0.25224303441444795, -1.3118762567672713), (-0.13050790747020602, -1.4101223799492701)], [(-0.8395502332570013, -0.8376209453039302), (-1.054128489564786, -1.0653118307815959), (-0.8264376040871204, -1.2798900870893806), (-0.6118593477793355, -1.0521992016117148)], [(-0.5943696993057392, -0.23694585755150172), (-0.4393341603166559, -0.25781984861185286), (-0.4184601692563047, -0.10278430962276952), (-0.5734957082453881, -0.08191031856241837)], [(-0.4643524085625286, -1.62277062581617), (-0.5808959285146713, -1.7271226732785354), (-0.47654388105230594, -1.843666193230678), (-0.3600003611001632, -1.7393141457683128)], [(-0.5191704863643225, -0.34143141655594306), (-0.6556506200658184, -0.264979373043392), (-0.7321026635783695, -0.4014595067448878), (-0.5956225298768736, -0.477911550257439)], [(-0.3068632380002042, -0.7621853466639317), (-0.0715894967171532, -0.9684212166583843), (0.13464637327729945, -0.7331474753753331), (-0.10062736800575134, -0.5269116053808807)], [(0.010985567356638581, -1.522935805290241), (0.09021914109103002, -1.388051474674339), (-0.04466518952487197, -1.3088179009399477), (-0.12389876325926341, -1.4437022315558496)]]


q7sol = [[(-0.8425851486620963, 0.7404833727810057), (-1.3601660204701, 0.7481797075962716), (-1.367862355285366, 0.23059883578826768), (-0.8502814834773622, 0.22290250097300185)], [(-0.6538059104100764, 0.8961617993488129), (-0.1487420731732847, 1.0095624728334545), (-0.2621427466579267, 1.5146263100702462), (-0.7672065838947184, 1.4012256365856044)], [(-0.39647622520047, 0.14835143689593885), (0.10395179682946595, 0.28071830283424104), (-0.028415069108836122, 0.781146324864177), (-0.5288430911387721, 0.6487794589258749)], [(-0.5101797447063252, 0.40698124496577526), (-0.5447740692806424, 0.6634778937061194), (-0.8012707180209866, 0.628883569131802), (-0.7666763934466694, 0.372386920391458)], [(-0.7324212036239814, 1.7128151577091089), (-0.9849740762773282, 1.656208226840857), (-0.9283671454090761, 1.4036553541875103), (-0.6758142727557295, 1.4602622850557625)]]

q9sol = [[(-2.6996834379571766, -4.469340879284459), (-3.03132065301154, -3.5259338846151462), (-3.9747276476808535, -3.8575710996695087), (-3.6430904326264897, -4.800978094338822)], [(-4.772825496272751, -1.875974997620447), (-4.4750727692288415, -2.830618026997353), (-3.520429739851936, -2.5328652999534427), (-3.8181824668958457, -1.5782222705765383)], [(-3.3709992941215394, -6.658129701182048), (-3.154525016053026, -7.634418022803646), (-2.178236694431428, -7.417943744735133), (-2.3947109724999414, -6.441655423113536)], [(-3.8333561593211827, -5.080624621665688), (-3.7199928172396484, -5.948249974379696), (-2.8523674645256407, -5.834886632298161), (-2.9657308066071755, -4.9672612795841555)], [(-4.144525016606902, -1.12173724782913), (-4.674606308011068, -0.2737904190106648), (-5.522553136829534, -0.803871710414831), (-4.992471845425367, -1.6518185392332958)], [(-3.6709039896719577, -2.587060677948817), (-4.565382709463696, -3.0341712010185957), (-4.118272186393918, -3.928649920810335), (-3.223793466602179, -3.481539397740557)], [(-4.794395787106774, -3.6337954428297135), (-5.27528512711566, -4.510576739770871), (-4.398503830174504, -4.991466079779757), (-3.9176144901656174, -4.1146847828386)], [(-2.8632406034690194, -0.12058159128543045), (-2.4230628831102505, 0.7773290804964328), (-3.320973554892114, 1.2175068008552017), (-3.7611512752508833, 0.31959612907333756)]]

room, furniture = parse("input.txt", 8)

#main(room, furniture)
onTop(room, q8sol)

