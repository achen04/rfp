from graphics import *
from operator import itemgetter
from random import randint

AXIS_X = 1000
AXIS_Y = 700
SCALE = 30

q5furniture = [[(0, 0), (-0.7757710192719733, -0.38884408435805773), (-0.38692693491391605, -1.164615103630031),
                (0.38884408435805806, -0.7757710192719731), (1, 0.7530203962825329)],
               [(0, 0), (-0.8667842979142654, 0.04129621256007303), (-0.9080805104743385, -0.8254880853541923),
                (-0.041296212560072695, -0.8667842979142655), (1, 0.7530203962825328)],
               [(0, 0), (0.3936451744525826, -0.773345894740981), (1.1669910691935637, -0.37970072028839846),
                (0.7733458947409809, 0.3936451744525829), (1, 0.7530203962825328)],
               [(0, 0), (0.09912641756737516, 0.8620872053468785), (-0.7629607877795033, 0.9612136229142537),
                (-0.8620872053468785, 0.09912641756737521), (1, 0.7530203962825328)],
               [(0, 0), (0.46422748325724916, -0.7331529445287478), (1.197380427785997, -0.2689254612714987),
                (0.7331529445287478, 0.46422748325724916), (1, 0.7530203962825328)],
               [(0, 0), (-0.8240814028411737, -0.27186437385920176), (-0.5522170289819719, -1.0959457767003755),
                (0.2718643738592017, -0.8240814028411737), (1, 0.7530203962825327)],
               [(0, 0), (0.08763293870708272, 0.8633312599090186), (-0.7756983212019358, 0.9509641986161014),
                (-0.8633312599090186, 0.08763293870708276), (1, 0.7530203962825327)],
               [(0, 0), (0.8499053202642943, 0.1751609056524316), (0.6747444146118627, 1.0250662259167258),
                (-0.17516090565243153, 0.8499053202642943), (1, 0.7530203962825327)],
               [(0, 0), (0.13546943680848592, 0.8571280114273039), (-0.7216585746188179, 0.9925974482357897),
                (-0.8571280114273039, 0.13546943680848597), (1, 0.7530203962825326)],
               [(0, 0), (-0.35323005882826847, 0.7926215501881783), (-1.1458516090164466, 0.4393914913599098),
                (-0.7926215501881783, -0.3532300588282684), (1, 0.7530203962825326)],
               [(0, 0), (-0.15596335534773087, 0.8536368244582764), (-1.009600179806007, 0.6976734691105455),
                (-0.8536368244582764, -0.15596335534773081), (1, 0.7530203962825326)],
               [(0, 0), (0.8064168409880026, -0.320487558032232), (1.1269043990202345, 0.4859292829557703),
                (0.3204875580322322, 0.8064168409880026), (1, 0.7530203962825326)],
               [(0, 0), (-0.7674617055359428, -0.4049974405084488), (-0.3624642650274935, -1.1724591460443918),
                (0.40499744050844844, -0.767461705535943), (1, 0.7530203962825326)],
               [(0, 0), (-0.8668293978814872, 0.04033845870817575), (-0.9071678565896628, -0.8264909391733114),
                (-0.040338458708176185, -0.8668293978814872), (1, 0.7530203962825326)],
               [(0, 0), (-0.23783406043453104, -0.8345390080635875), (0.5967049476290555, -1.072373068498119),
                (0.8345390080635875, -0.23783406043453106), (1, 0.7530203962825326)],
               [(0, 0), (-0.30834329411487216, -0.8111379717760241), (0.5027946776611519, -1.1194812658908964),
                (0.8111379717760241, -0.3083432941148722), (1, 0.7530203962825326)],
               [(0, 0), (0.44060597515381156, 0.7475872998796138), (-0.30698132472580214, 1.1881932750334252),
                (-0.7475872998796137, 0.44060597515381167), (1, 0.7530203962825326)],
               [(0, 0), (-0.64347929707973, 0.5821982398739362), (-1.225677536953666, -0.061281057205793854),
                (-0.5821982398739363, -0.64347929707973), (1, 0.7530203962825326)],
               [(0, 0), (0.5304703068765909, -0.6867471512898967), (1.2172174581664874, -0.1562768444133069),
                (0.6867471512898968, 0.5304703068765907), (1, 0.7530203962825326)],
               [(0, 0), (-0.805658653472568, -0.32238878759550765), (-0.4832698658770604, -1.1280474410680754),
                (0.3223887875955076, -0.805658653472568), (1, 0.7530203962825326)],
               [(0, 0), (0.6999793503383961, 0.5128833253112931), (0.18709602502710307, 1.212862675649689),
                (-0.512883325311293, 0.6999793503383962), (1, 0.7530203962825326)],
               [(0, 0), (0.7672767906930581, -0.40534765664339767), (1.1726244473364558, 0.36192913404966026),
                (0.40534765664339784, 0.767276790693058), (1, 0.7530203962825326)],
               [(0, 0), (-0.6801531795226188, -0.5388989224964225), (-0.14125425702619582, -1.2190521020190412),
                (0.5388989224964221, -0.680153179522619), (1, 0.7530203962825326)],
               [(0, 0), (-0.7164310549569408, -0.4896396019275989), (-0.22679145302934142, -1.2060706568845398),
                (0.48963960192759853, -0.7164310549569411), (1, 0.7530203962825324)],
               [(0, 0), (-0.3393580498993522, 0.27035386632919084), (-0.6097119162285429, -0.06900418357016132),
                (-0.27035386632919073, -0.33935804989935225), (1, 0.1882550990706332)],
               [(0, 0), (-0.39713926908291053, 0.1747440986783953), (-0.5718833677613059, -0.2223951704045152),
                (-0.17474409867839516, -0.3971392690829106), (1, 0.1882550990706332)],
               [(0, 0), (-0.41125990083302294, 0.13827650934791982), (-0.5495364101809427, -0.2729833914851031),
                (-0.13827650934791982, -0.41125990083302294), (1, 0.1882550990706332)],
               [(0, 0), (0.36172339441832757, -0.23960652119906123), (0.6013299156173888, 0.12211687321926648),
                (0.23960652119906117, 0.3617233944183277), (1, 0.1882550990706332)],
               [(0, 0), (-0.4318310345880036, 0.042155149593941635), (-0.4739861841819452, -0.3896758849940619),
                (-0.042155149593941475, -0.43183103458800365), (1, 0.1882550990706332)],
               [(0, 0), (-0.4146646445455367, 0.12770407837871453), (-0.5423687229242512, -0.2869605661668222),
                (-0.12770407837871436, -0.41466464454553675), (1, 0.1882550990706332)],
               [(0, 0), (-0.0791174599116699, -0.42660933722523997), (0.34749187731357, -0.5057267971369098),
                (0.42660933722523997, -0.07911745991166992), (1, 0.18825509907063318)],
               [(0, 0), (-0.27238894214141046, 0.33772675829687604), (-0.6101157004382864, 0.06533781615546558),
                (-0.33772675829687604, -0.27238894214141046), (1, 0.18825509907063318)],
               [(0, 0), (-0.03825595256904528, 0.4321939161576296), (-0.4704498687266748, 0.3939379635885843),
                (-0.4321939161576296, -0.038255952569045244), (1, 0.18825509907063318)],
               [(0, 0), (0.28627753899057645, -0.3260372214029131), (0.6123147603934894, -0.039759682412336635),
                (0.32603722140291297, 0.2862775389905765), (1, 0.18825509907063315)],
               [(0, 0), (-0.42551564287959703, -0.08480292881378838), (-0.3407127140658084, -0.5103185716933855),
                (0.08480292881378818, -0.42551564287959703), (1, 0.18825509907063315)],
               [(0, 0), (-0.2606224059714267, 0.34688767717562125), (-0.6075100831470479, 0.08626527120419451),
                (-0.34688767717562125, -0.2606224059714267), (1, 0.18825509907063315)],
               [(0, 0), (-0.1998357060561464, 0.3851243820581536), (-0.5849600881142999, 0.18528867600200719),
                (-0.3851243820581536, -0.19983570605614637), (1, 0.18825509907063315)],
               [(0, 0), (0.43381155110273034, -0.007914366713539102), (0.4417259178162695, 0.4258971843891911),
                (0.007914366713539215, 0.43381155110273034), (1, 0.18825509907063315)],
               [(0, 0), (-0.3913590971095896, -0.18733167425771854), (-0.2040274228518711, -0.5786907713673082),
                (0.18733167425771854, -0.3913590971095896), (1, 0.18825509907063315)]]

q5sol = [[(0.7694300000000001, 1.6356199999999999), (-0.006341019271973336, 1.2467759156419422), (0.38250306508608395, 0.47100489636996895), (1.1582740843580581, 0.8598489807280267), (0.7694300000000001, 1.6356199999999999)], [(0.30845, 0.6111), (-0.10280990083302294, 0.7493765093479198), (-0.24108641018094268, 0.3381166085148969), (0.17017349065208018, 0.19984009916697704), (0.30845, 0.6111)]]


q5room = [(0, 0), (0.8676384980996892, 0.014961046014522923), (1.3969052365800665, 0.702636198845332),
          (1.1892515662914749, 1.5451920423941201), (0.40104493632415167, 1.9081668414616144),
          (-0.37417898447138936, 1.5182331690134385), (-0.5526607720499913, 0.6690190336004208)]


def main():
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Display Furniture
    for index, furniture in enumerate(q5furniture):
        furniturePoints = []

        largestx = max(furniture, key=itemgetter(1))[0]
        largesty = max(furniture, key=itemgetter(1))[1]

        posx = randint(1, round(AXIS_X))
        posy = randint(1, round(AXIS_Y))

        for coord in furniture[:-1]:
            furniturePoints.append(Point((coord[0] - largestx) * SCALE + posx, (coord[1] - largesty) * SCALE + posy))

        weight = round(furniture[-1][1])

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255, 20, 100))
        display.draw(win)

    # Display Room
    room = [(0, 0), (10, 0), (10, 10), (0, 10)]

    q30room = [(0, 0), (0, 10), (-10, 15), (-10, 25), (-180, 25), (-180, 27), (-169, 27), (-169, 95), (-148, 95), (-148, 27), (-131, 27), (-131, 95), (-109, 95), (-109, 27), (-91, 27), (-91, 95), (-69, 95), (-69, 27), (-52, 27), (-52, 95), (-31, 95), (-31, 27), (-15, 27), (-15, 100), (-12, 110), (-10, 110), (-8, 113), (-50, 125), (-50, 130), (-52, 132), (-52, 140), (-55, 147), (-57, 147), (-63, 164), (-67, 169), (-77, 177), (-87, 182), (-87, 187), (-90, 190), (-90, 205), (-87, 205), (-98, 217), (-97, 218), (-97, 223), (-103, 223), (-103, 218), (-102, 217), (-113, 205), (-110, 205), (-110, 190), (-113, 187), (-113, 182), (-123, 177), (-133, 169), (-137, 164), (-143, 147), (-145, 147), (-148, 140), (-148, 132), (-150, 130), (-150, 125), (-192, 113), (-190, 110), (-188, 110), (-185, 100), (-185, 25), (-190, 25), (-190, 15), (-200, 10), (-200, 0)]

    largestx = max(q5room, key=itemgetter(1))[0]
    largesty = max(q5room, key=itemgetter(1))[1]

    roomPoints = []

    for coord in q5room:
        roomPoints.append(Point(((coord[0] - largestx/2) * SCALE) + AXIS_X/2, ((coord[1] - largesty/2) * SCALE) + AXIS_Y/2))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(66, 134, 244))
    display.draw(win)

    win.getMouse()
    win.close()


def onTop():
    win = GraphWin("Visualiser", AXIS_X, AXIS_Y)
    win.setBackground(color_rgb(0, 0, 0))

    # Room
    room = [(0, 0), (10, 0), (10, 10), (0, 10)]

    roomPoints = []

    for coord in q5room:
        roomPoints.append(Point(coord[0] * SCALE + 100, coord[1] * SCALE + 100))

    display = Polygon(roomPoints)
    display.setFill(color_rgb(66, 134, 244))
    display.draw(win)

    # Furniture
    data = [[(0, 0), (4, 0), (4, 10), (0, 10), (40, 40.0)], [(0, 0), (4, 0), (4, 10), (0, 10), (40, 40.0)], [(0, 0), (6, 0), (0, 10), (30, 30.0)], [(0, 0), (6, 0), (0, 10), (30, 30.0)], [(0, 0), (3, 0), (3, 5), (-3, 5), (23, 22.5)], [(0, 0), (3, 0), (3, 5), (-3, 5), (23, 22.5)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (4.610317298281767, 0), (4.6103172982817675, 4.610317298281767), (0, 4.610317298281767), (21, 21.25502559083609)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3.5, 0), (3.5000000000000004, 3.4999999999999996), (0, 3.5), (12, 12.25)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (3, 0), (3, 3), (0, 3), (9, 9.0)], [(0, 0), (0, 5), (-3, 5), (8, 7.5)], [(0, 0), (0, 5), (-3, 5), (8, 7.5)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.4788689868556624, 0), (2.4788689868556624, 2.4788689868556624), (0, 2.4788689868556624), (6, 6.144791453994818)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2.3051586491408833, 0), (2.3051586491408838, 2.3051586491408833), (0, 2.3051586491408833), (5, 5.313756397709023)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (2, 0), (2, 2), (0, 2), (4, 4.0)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)], [(0, 0), (1.5, 0), (1.5, 1.4999999999999998), (0, 1.5), (2, 2.25)]]
    data2 = [[(0, 0), (0, 5), (-3, 5), (8, 7.5)]]

    for index, furniture in enumerate(q5sol):
        furniturePoints = []

        for coord in furniture[:-1]:
            furniturePoints.append(Point(coord[0] * SCALE + 100, coord[1] * SCALE + 100))

        weight = round(furniture[-1][1]*3)
        print(weight)

        display = Polygon(furniturePoints)
        display.setFill(color_rgb(255 - weight, 20, 100))
        display.draw(win)



    win.getMouse()
    win.close()


#main()
onTop()

